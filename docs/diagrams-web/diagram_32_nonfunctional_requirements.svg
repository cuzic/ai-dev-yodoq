<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1820 1300">
  <defs>
    <style>
      .title { font-family: 'Noto Sans JP', sans-serif; font-size: 90px; font-weight: bold; fill: #333333; }
      .category-title { font-family: 'Noto Sans JP', sans-serif; font-size: 70px; font-weight: bold; fill: white; }
      .req-text { font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: white; }
    </style>
  </defs>

  <!-- Background -->
  <rect width="1400" height="1000" fill="#FFFFFF"/>

  <!-- Title -->
  <text x="700" y="40" class="title" text-anchor="middle">非機能要件チェックリスト（AIに指示すべき項目）</text>

  <!-- Category 1: Security -->
  <rect x="50" y="80" width="420" height="280" fill="#00146E" rx="10"/>
  <text x="260" y="110" class="category-title" text-anchor="middle">🔒 セキュリティ</text>

  <text x="70" y="140" class="req-text" font-weight="bold">□ 認証・認可</text>
  <text x="80" y="158" class="req-text">• BCryptでパスワードハッシュ化（ストレッチング10回以上）</text>
  <text x="80" y="173" class="req-text">• JWT認証（有効期限24時間、リフレッシュトークン対応）</text>
  <text x="80" y="188" class="req-text">• ロール・権限管理（@PreAuthorize使用）</text>

  <text x="70" y="213" class="req-text" font-weight="bold">□ 入力検証</text>
  <text x="80" y="231" class="req-text">• @Valid によるバリデーション（Bean Validation）</text>
  <text x="80" y="246" class="req-text">• SQLインジェクション対策（PreparedStatement必須）</text>
  <text x="80" y="261" class="req-text">• XSS対策（入力サニタイゼーション）</text>

  <text x="70" y="286" class="req-text" font-weight="bold">□ 機密情報管理</text>
  <text x="80" y="304" class="req-text">• 環境変数で管理（.env.example作成）</text>
  <text x="80" y="319" class="req-text">• シークレットをGitにコミットしない（.gitignore設定）</text>
  <text x="80" y="334" class="req-text">• ログに機密情報を出力しない</text>

  <!-- Category 2: Performance -->
  <rect x="490" y="80" width="420" height="280" fill="#003399" rx="10"/>
  <text x="700" y="110" class="category-title" text-anchor="middle">⚡ パフォーマンス</text>

  <text x="510" y="140" class="req-text" font-weight="bold">□ データベース最適化</text>
  <text x="520" y="158" class="req-text">• N+1問題対策（@EntityGraph、JOIN FETCH使用）</text>
  <text x="520" y="173" class="req-text">• インデックス設定（検索頻度の高いカラム）</text>
  <text x="520" y="188" class="req-text">• ページング実装（Pageable使用、最大100件/ページ）</text>

  <text x="510" y="213" class="req-text" font-weight="bold">□ キャッシング</text>
  <text x="520" y="231" class="req-text">• @Cacheable で頻繁アクセスデータをキャッシュ</text>
  <text x="520" y="246" class="req-text">• キャッシュ有効期限設定（Redis: TTL 1時間）</text>
  <text x="520" y="261" class="req-text">• キャッシュ無効化戦略（更新時に@CacheEvict）</text>

  <text x="510" y="286" class="req-text" font-weight="bold">□ リソース管理</text>
  <text x="520" y="304" class="req-text">• コネクションプール設定（HikariCP: max 10）</text>
  <text x="520" y="319" class="req-text">• タイムアウト設定（API: 30秒、DB: 10秒）</text>
  <text x="520" y="334" class="req-text">• 非同期処理（@Async、CompletableFuture使用）</text>

  <!-- Category 3: Reliability -->
  <rect x="930" y="80" width="420" height="280" fill="#00AFF0" rx="10"/>
  <text x="1140" y="110" class="category-title" text-anchor="middle">🛡️ 信頼性</text>

  <text x="950" y="140" class="req-text" font-weight="bold">□ エラーハンドリング</text>
  <text x="960" y="158" class="req-text">• カスタム例外クラス作成（BusinessException等）</text>
  <text x="960" y="173" class="req-text">• @ControllerAdvice で統一エラーレスポンス</text>
  <text x="960" y="188" class="req-text">• エラーログ出力（StackTrace含む）</text>

  <text x="950" y="213" class="req-text" font-weight="bold">□ トランザクション管理</text>
  <text x="960" y="231" class="req-text">• @Transactional 適切に使用（READ_ONLY指定）</text>
  <text x="960" y="246" class="req-text">• ロールバック条件明記（rollbackFor指定）</text>
  <text x="960" y="261" class="req-text">• 楽観的ロック/悲観的ロック（@Version使用）</text>

  <text x="950" y="286" class="req-text" font-weight="bold">□ ログ・監視</text>
  <text x="960" y="304" class="req-text">• 構造化ログ（SLF4J + Logback、JSON形式）</text>
  <text x="960" y="319" class="req-text">• ログレベル適切に設定（本番: INFO、開発: DEBUG）</text>
  <text x="960" y="334" class="req-text">• ヘルスチェックエンドポイント（/actuator/health）</text>

  <!-- Category 4: Usability -->
  <rect x="50" y="380" width="420" height="280" fill="#66D9FF" rx="10"/>
  <text x="260" y="410" style="font-family: 'Noto Sans JP', sans-serif; font-size: 70px; font-weight: bold; fill: #00146E; text-anchor: middle;">
    🎨 使いやすさ
  </text>

  <text x="70" y="440" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E; font-weight: bold;">
    □ API設計
  </text>
  <text x="80" y="458" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • RESTful API（GET/POST/PUT/DELETE適切に使用）
  </text>
  <text x="80" y="473" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • HTTPステータスコード適切に返却（200/201/400/404/500）
  </text>
  <text x="80" y="488" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • エラーメッセージはユーザーフレンドリー
  </text>

  <text x="70" y="513" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E; font-weight: bold;">
    □ バリデーションメッセージ
  </text>
  <text x="80" y="531" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • 日本語メッセージ（ValidationMessages.properties）
  </text>
  <text x="80" y="546" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • フィールド名を含む具体的メッセージ
  </text>
  <text x="80" y="561" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • 複数エラー時は全件表示
  </text>

  <text x="70" y="586" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E; font-weight: bold;">
    □ ドキュメント
  </text>
  <text x="80" y="604" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • Swagger/OpenAPI仕様書自動生成
  </text>
  <text x="80" y="619" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • README.md（セットアップ手順、API使用例）
  </text>
  <text x="80" y="634" style="font-family: 'Noto Sans JP', sans-serif; font-size: 50px; fill: #00146E;">
    • .env.example（環境変数テンプレート）
  </text>

  <!-- Category 5: Maintainability -->
  <rect x="490" y="380" width="420" height="280" fill="#4D6DB3" rx="10"/>
  <text x="700" y="410" class="category-title" text-anchor="middle">🔧 保守性</text>

  <text x="510" y="440" class="req-text" font-weight="bold">□ コーディング規約</text>
  <text x="520" y="458" class="req-text">• 変数名・メソッド名は意図が明確（英語、lowerCamelCase）</text>
  <text x="520" y="473" class="req-text">• マジックナンバー禁止（定数化必須）</text>
  <text x="520" y="488" class="req-text">• 1メソッド30行以内、1クラス300行以内</text>

  <text x="510" y="513" class="req-text" font-weight="bold">□ テスト</text>
  <text x="520" y="531" class="req-text">• カバレッジ80%以上（JaCoCo）</text>
  <text x="520" y="546" class="req-text">• 単体テスト（JUnit5 + Mockito）</text>
  <text x="520" y="561" class="req-text">• 統合テスト（@SpringBootTest）</text>

  <text x="510" y="586" class="req-text" font-weight="bold">□ 依存管理</text>
  <text x="520" y="604" class="req-text">• ライブラリバージョン固定（pom.xml/package.json）</text>
  <text x="520" y="619" class="req-text">• 脆弱性スキャン（Dependabot、npm audit）</text>
  <text x="520" y="634" class="req-text">• 未使用依存削除（定期的にクリーンアップ）</text>

  <!-- Category 6: Scalability -->
  <rect x="930" y="380" width="420" height="280" fill="#00146E" rx="10"/>
  <text x="1140" y="410" class="category-title" text-anchor="middle">📈 拡張性</text>

  <text x="950" y="440" class="req-text" font-weight="bold">□ 設計原則</text>
  <text x="960" y="458" class="req-text">• SOLID原則遵守（単一責任、依存性逆転等）</text>
  <text x="960" y="473" class="req-text">• レイヤードアーキテクチャ（Controller/Service/Repository）</text>
  <text x="960" y="488" class="req-text">• DIコンテナ活用（@Autowired、コンストラクタインジェクション）</text>

  <text x="950" y="513" class="req-text" font-weight="bold">□ 設定外部化</text>
  <text x="960" y="531" class="req-text">• application.yml で環境別設定（dev/stg/prod）</text>
  <text x="960" y="546" class="req-text">• フィーチャーフラグ（機能ON/OFF切り替え）</text>
  <text x="960" y="561" class="req-text">• プロファイル切り替え（@Profile使用）</text>

  <text x="950" y="586" class="req-text" font-weight="bold">□ モジュール化</text>
  <text x="960" y="604" class="req-text">• 共通機能はライブラリ化</text>
  <text x="960" y="619" class="req-text">• 疎結合設計（インターフェース活用）</text>
  <text x="960" y="634" class="req-text">• マイクロサービス化を見据えた境界設計</text>

  <!-- Bottom: How to use with AI -->
  <rect x="50" y="690" width="1300" height="280" fill="#E6E6E6" stroke="#00146E" stroke-width="3" rx="10"/>
  <text x="700" y="725" style="font-family: 'Noto Sans JP', sans-serif; font-size: 81px; fill: #00146E; text-anchor: middle; font-weight: bold;">
    AIへの指示例（非機能要件を含める）
  </text>

  <rect x="70" y="745" width="1260" height="210" fill="#00AFF0" rx="8"/>
  <text x="90" y="770" style="font-family: 'Noto Sans JP', sans-serif; font-size: 64px; fill: white; font-weight: bold;">
    プロンプト例:
  </text>
  <text x="100" y="790" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    「ユーザー登録機能を実装して。以下の非機能要件を満たすこと:
  </text>
  <text x="110" y="810" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    【セキュリティ】BCryptでパスワードハッシュ化、@Valid でバリデーション、環境変数でシークレット管理
  </text>
  <text x="110" y="830" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    【パフォーマンス】メールアドレス重複チェックにインデックス設定、@Async で非同期メール送信
  </text>
  <text x="110" y="850" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    【信頼性】@Transactional でトランザクション管理、@ControllerAdvice で統一エラー処理
  </text>
  <text x="110" y="870" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    【使いやすさ】日本語エラーメッセージ、Swagger API仕様書、README.md作成
  </text>
  <text x="110" y="890" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    【保守性】JUnit テストコード（カバレッジ80%以上）、変数名は意図明確に
  </text>
  <text x="110" y="910" style="font-family: 'Courier New', monospace; font-size: 54px; fill: white;">
    【拡張性】Controller/Service/Repository 3層アーキテクチャ、DIコンテナ活用」
  </text>

  <text x="90" y="940" style="font-family: 'Noto Sans JP', sans-serif; font-size: 64px; fill: white; font-weight: bold;">
    → 非機能要件を明記することで、AIが本番レベルのコードを生成！
  </text>
</svg>
