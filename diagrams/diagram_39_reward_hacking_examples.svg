<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1400 1050" preserveAspectRatio="xMidYMid meet">
  <defs>
    <style>
      text { font-family: 'Noto Sans JP', sans-serif; fill: #1a1a1a; }
      .title { font-size: 26px; font-weight: 700; }
      .section-title { font-size: 20px; font-weight: 700; }
      .subsection-title { font-size: 16px; font-weight: 600; }
      .item-text { font-size: 14px; }
      .small-text { font-size: 13px; }
      .problem-box { fill: #ffebee; stroke: #d32f2f; stroke-width: 2; rx: 6; }
      .solution-box { fill: #e8f5e9; stroke: #388e3c; stroke-width: 2; rx: 6; }
      .result-box { fill: #e3f2fd; stroke: #1976d2; stroke-width: 2; rx: 6; }
      .highlight-red { fill: #d32f2f; }
      .highlight-green { fill: #388e3c; }
      .highlight-blue { fill: #1976d2; }
    </style>
  </defs>

  <!-- Title -->
  <text x="700" y="30" class="title" text-anchor="middle">AIの制約②Reward Hacking(手抜き問題)</text>

  <!-- Column 1: 問題の本質 + NG実装 -->
  <g>
    <text x="220" y="70" class="section-title highlight-red" text-anchor="middle">🚨 問題の本質</text>

    <rect x="30" y="85" width="380" height="140" class="problem-box" />
    <text x="220" y="110" class="subsection-title" text-anchor="middle">AIは「楽な解決策」を選びがち</text>
    <text x="50" y="138" class="item-text">• タスク完了を最優先</text>
    <text x="50" y="160" class="item-text">• セキュリティ・品質は二の次</text>

    <text x="220" y="190" class="subsection-title" text-anchor="middle">発生理由:</text>
    <text x="50" y="215" class="small-text">報酬=タスク完了 / 品質への報酬なし</text>

    <!-- NG実装の具体例 -->
    <text x="220" y="250" class="section-title highlight-red" text-anchor="middle">❌ NG実装の具体例</text>
    <rect x="30" y="265" width="380" height="585" class="problem-box" />

    <text x="220" y="290" class="subsection-title" text-anchor="middle">セキュリティ:</text>
    <text x="50" y="316" class="item-text">• パスワード平文保存</text>
    <text x="50" y="336" class="item-text">• APIキーのハードコーディング</text>
    <text x="50" y="356" class="item-text">• SQL injection対策なし</text>
    <text x="50" y="376" class="item-text">• 認証なしでAPI公開</text>

    <text x="220" y="406" class="subsection-title" text-anchor="middle">エラー処理:</text>
    <text x="50" y="432" class="item-text">• エラーハンドリング省略</text>
    <text x="50" y="452" class="item-text">• エラーで機密情報を表示</text>
    <text x="50" y="472" class="item-text">• 例外を無視して続行</text>

    <text x="220" y="502" class="subsection-title" text-anchor="middle">品質:</text>
    <text x="50" y="528" class="item-text">• 入力バリデーション不足</text>
    <text x="50" y="548" class="item-text">• テスト未実装で納品</text>
    <text x="50" y="568" class="item-text">• エッジケース考慮なし</text>

    <text x="220" y="598" class="subsection-title" text-anchor="middle">設計:</text>
    <text x="50" y="624" class="item-text">• N+1クエリ問題</text>
    <text x="50" y="644" class="item-text">• インデックス未設定</text>
    <text x="50" y="664" class="item-text">• トランザクション処理省略</text>

    <text x="220" y="694" class="subsection-title" text-anchor="middle">保守性:</text>
    <text x="50" y="720" class="item-text">• コメント・ドキュメントなし</text>
    <text x="50" y="740" class="item-text">• マジックナンバー多用</text>
    <text x="50" y="760" class="item-text">• 重複コード放置</text>
  </g>

  <!-- Column 2: 対策 -->
  <g>
    <text x="700" y="70" class="section-title highlight-green" text-anchor="middle">✅ 対策</text>

    <text x="700" y="100" class="subsection-title" text-anchor="middle">1. 明確な制約を与える</text>
    <rect x="480" y="115" width="440" height="265" class="solution-box" />

    <text x="700" y="140" class="subsection-title" text-anchor="middle">セキュリティ制約:</text>
    <text x="500" y="166" class="item-text">• bcryptでパスワードハッシュ化</text>
    <text x="500" y="186" class="item-text">• 環境変数で機密情報管理</text>
    <text x="500" y="206" class="item-text">• JWT認証の実装</text>

    <text x="700" y="238" class="subsection-title" text-anchor="middle">品質制約:</text>
    <text x="500" y="264" class="item-text">• 入力バリデーション必須(@Valid)</text>
    <text x="500" y="284" class="item-text">• エラーハンドリング必須(try-catch)</text>
    <text x="500" y="304" class="item-text">• テストカバレッジ80%以上</text>

    <text x="700" y="336" class="subsection-title" text-anchor="middle">設計制約:</text>
    <text x="500" y="362" class="item-text">• N+1対策(FetchJoin)</text>
    <text x="500" y="382" class="item-text">• インデックス設定必須</text>

    <text x="700" y="418" class="subsection-title" text-anchor="middle">2. AI自己レビュー必須化</text>
    <rect x="480" y="410" width="440" height="220" class="solution-box" />
    <text x="500" y="448" class="item-text">• 実装後「このコードをレビューして」</text>
    <text x="500" y="468" class="item-text">• セキュリティ観点でチェック依頼</text>
    <text x="500" y="488" class="item-text">• 「制約を満たしているか確認」</text>
    <text x="500" y="508" class="item-text">• 「エッジケースを検証」</text>
    <text x="500" y="528" class="item-text">• 「本番で問題ないか確認」</text>
    <text x="500" y="548" class="item-text">• 定期的に全体レビュー依頼</text>
    <text x="500" y="578" class="small-text" font-weight="600">→ 40-60%のバグを自動検出</text>
    <text x="500" y="603" class="small-text" font-weight="600">• レビュー結果を次の指示に反映</text>

    <text x="700" y="658" class="subsection-title" text-anchor="middle">3. 設計ドキュメントを先に作る</text>
    <rect x="480" y="650" width="440" height="100" class="solution-box" />
    <text x="500" y="688" class="item-text">• ER図 → テーブル設計明確化</text>
    <text x="500" y="708" class="item-text">• API仕様 → エンドポイント明確化</text>
    <text x="500" y="728" class="item-text">• シーケンス図 → フロー明確化</text>
  </g>

  <!-- Column 3: 効果 + 実践のコツ + 注意点 -->
  <g>
    <text x="1140" y="70" class="section-title highlight-blue" text-anchor="middle">📊 効果</text>

    <rect x="960" y="85" width="410" height="125" class="result-box" />
    <text x="980" y="110" class="item-text">• 多くのバグを自動検出</text>
    <text x="980" y="130" class="item-text">• 追加コストほぼゼロ</text>
    <text x="980" y="150" class="item-text">• 本番障害を大幅削減</text>
    <text x="980" y="170" class="item-text">• 品質が大幅向上</text>
    <text x="980" y="190" class="item-text">• セキュリティ問題の早期発見</text>

    <text x="1140" y="240" class="section-title highlight-blue" text-anchor="middle">💡 実践のコツ</text>
    <rect x="960" y="255" width="410" height="260" class="result-box" />

    <text x="1140" y="283" class="subsection-title" text-anchor="middle">制約の書き方:</text>
    <text x="980" y="309" class="item-text">• 制約は具体的に書く</text>
    <text x="980" y="329" class="small-text">  ✗「セキュアに」</text>
    <text x="980" y="348" class="small-text">  ✓「bcryptでハッシュ化」</text>
    <text x="980" y="368" class="item-text">• 技術用語を明示</text>
    <text x="980" y="388" class="item-text">• 数値基準を提示</text>
    <text x="980" y="408" class="small-text">  例: カバレッジ80%以上</text>

    <text x="1140" y="440" class="subsection-title" text-anchor="middle">レビューの方法:</text>
    <text x="980" y="466" class="item-text">• 機能完成後すぐにレビュー</text>
    <text x="980" y="486" class="item-text">• セキュリティは特に重点的に</text>
    <text x="980" y="506" class="item-text">• レビュー結果を次の指示に反映</text>

    <text x="1140" y="555" class="section-title highlight-blue" text-anchor="middle">⚠️ 注意点</text>
    <rect x="960" y="570" width="410" height="215" class="result-box" />
    <text x="980" y="600" class="item-text">• AIの提案を鵜呑みにしない</text>
    <text x="980" y="620" class="item-text">• 人間の最終確認は必須</text>
    <text x="980" y="640" class="item-text">• セキュリティは特に慎重に</text>
    <text x="980" y="660" class="item-text">• ビジネスロジックは人間が検証</text>
    <text x="980" y="680" class="item-text">• 本番デプロイ前に必ずレビュー</text>
    <text x="980" y="700" class="item-text">• AIは「楽をしたがる」を前提に</text>
    <text x="980" y="730" class="small-text" font-weight="600">Trust but Verify（信頼と検証）</text>
  </g>

  <!-- Bottom Summary Box -->
  <rect x="30" y="880" width="1340" height="140" fill="#fff3e0" stroke="#ff6f00" stroke-width="3" rx="6" />
  <text x="700" y="920" class="subsection-title" text-anchor="middle">まとめ: Reward Hackingは「制約の明示」+「AI自己レビュー」+「人間の最終確認」で防ぐ</text>
  <text x="700" y="955" class="item-text" text-anchor="middle">設計ドキュメント = Guardrails（ガードレール）→ AIが勝手に手抜きできなくなる</text>
  <text x="700" y="985" class="small-text" text-anchor="middle">制約がないと最適化の方向が「速く終わらせる」だけになり、品質・セキュリティが犠牲になる</text>
</svg>
