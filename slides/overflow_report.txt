================================================================================
CHECKING SLIDES FOR VERTICAL OVERFLOW
================================================================================

📄 Analyzing: index.html

⚠️  Found 38 slides with potential overflow:
   🔴 HIGH risk: 12
   🟡 MEDIUM risk: 11
   🟢 LOW risk: 15

================================================================================
HIGH RISK SLIDES
================================================================================

📍 Slide 112: 演習成功のチェックリスト①
   Estimated height: 4230px (max: 670px)
   Overflow: 3560px
   Content: 0 h2, 2 h3, 0 h4, 0 paragraphs, 12 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. AIに質問させて曖昧さ排除
      2. ユーザーストーリー作成
      3. エラー・エッジケース洗い出し
      4. 受け入れ基準（Given-When-Then）
      5. Tech Stack Setup決定

📍 Slide 125: 
   Estimated height: 4175px (max: 670px)
   Overflow: 3505px
   Content: 1 h2, 3 h3, 0 h4, 7 paragraphs, 17 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. リバースエンジニアリング（既存コードから仕様を読み解く）
      2. テストシナリオ一覧作成（モレ・ヌケ防止）
      3. デグレ防止（既存機能が壊れないことを保証）
      4. 既存システムへの機能追加（実プロジェクトベース）
      5. 1日目: 新規開発（ゼロから作る）

📍 Slide 27: 非機能要件
   Estimated height: 3620px (max: 670px)
   Overflow: 2950px
   Content: 3 h2, 0 h3, 0 h4, 8 paragraphs, 18 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 性能不足（遅い、落ちる）
      2. セキュリティ脆弱性
      3. 拡張性の欠如
      4. Reward Hacking → 手抜き実装
      5. 非機能要件 = Guardrails

📍 Slide 23: 要件の引き出し方（文字起こしアプローチ）
   Estimated height: 2520px (max: 670px)
   Overflow: 1850px
   Content: 3 h2, 0 h3, 0 h4, 10 paragraphs, 16 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 解釈のズレゼロ
      2. 「言った/言わない」問題の解消
      3. 顧客の本当のニーズを捉える
      4. 漏れ・ヌケ防止
      5. 自動で優先順位付け

📍 Slide 10: セキュリティベストプラクティス（補足）
   Estimated height: 2230px (max: 670px)
   Overflow: 1560px
   Content: 0 h2, 0 h3, 0 h4, 6 paragraphs, 12 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. bcrypt でパスワードハッシュ化
      2. JWT または セッション認証
      3. 環境変数で秘密鍵管理
      4. SQL injection 対策（PreparedStatement）
      5. XSS 対策（エスケープ処理）

📍 Slide 140: 
   Estimated height: 1740px (max: 670px)
   Overflow: 1070px
   Content: 0 h2, 1 h3, 0 h4, 1 paragraphs, 10 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 従来のアプローチ（コード追認のみ）

既存コード→直接テスト生成→実装済み機能のみカバー
      2. 問題: 既存バグも追認、エッジケース見落とし、仕様外の動作を検出できない
      3. リバースエンジニアリング（仕様逆生成）

既存コード→要件定義書・ユーザーストーリー逆生成→網羅的テストシナリオ
      4. 効果: あるべき仕様に基づくテスト、未実装のエッジケースも検出、仕様外の動作を発見
      5. 核心的価値:

コードの追認ではなく「あるべき姿」に基づいたテストが可能

📍 Slide 96: 1日目の振り返り
   Estimated height: 1350px (max: 670px)
   Overflow: 680px
   Content: 2 h2, 0 h3, 0 h4, 3 paragraphs, 3 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 飛ばさない
      2. 急がば回れ
      3. AIの制約を理解して対処

📍 Slide 18: 効率的な指示の出し方
   Estimated height: 1315px (max: 670px)
   Overflow: 645px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 悪い指示: 「ログイン機能を作って」
      2. 良い指示:

制約を明示（bcrypt、環境変数、バリデーション、レート制限）
      3. 段階的に進める（1機能ずつ）
      4. 質問を促す（「確認したいことはある？」）
      5. 自己レビュー依頼（実装後必ず）

📍 Slide 88: STEP5 チェックリスト
   Estimated height: 1065px (max: 670px)
   Overflow: 395px
   Content: 0 h2, 0 h3, 0 h4, 4 paragraphs, 15 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. [ ] ユニットテストカバレッジ80%以上
      2. [ ] E2Eテスト（Playwright）実施
      3. [ ] ビジュアルリグレッションテスト実施
      4. [ ] AI一般レビュー実施
      5. [ ] AIセキュリティレビュー実施（OWASP Top 10）

📍 Slide 204: 
   Estimated height: 995px (max: 670px)
   Overflow: 325px
   Content: 0 h2, 1 h3, 5 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 失敗: STEP1-2スキップ→何度も作り直し
      2. 対策: 前工程丁寧に（10分要件+15分設計）
      3. 失敗: 本番脆弱性（平文、SQLi、XSS）
      4. 対策: 最初から要件明記（bcrypt、HTTPS、OWASP）
      5. 失敗: バグ多発

📍 Slide 94: Part 2のキーポイント
   Estimated height: 970px (max: 670px)
   Overflow: 300px
   Content: 2 h2, 5 h3, 0 h4, 13 paragraphs, 0 list items
   Layout: Single column (HIGH RISK)

📍 Slide 105: 
   Estimated height: 940px (max: 670px)
   Overflow: 270px
   Content: 0 h2, 1 h3, 5 h4, 0 paragraphs, 16 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. Claude Code環境確認、プロジェクト作成
      2. 課題要件確認
      3. AIに質問させて仕様確定
      4. 要件定義（ユーザーストーリー、エッジケース）
      5. 設計（Tech Stack、DBスキーマ、API仕様）

================================================================================
MEDIUM RISK SLIDES
================================================================================

📍 Slide 200: 2日間の総まとめ
   Estimated height: 825px (max: 670px)
   Overflow: 155px
   Content: 0 h2, 2 h3, 0 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. STEP1-2: 要件・設計（Guardrails、曖昧さ排除）
      2. STEP3: タスク分解（AI思考言語化）
      3. STEP4: 実装（TDD、AI自己レビュー）
      4. STEP5: 品質担保＆ドキュメント反映（Trust but Verify、Living Documentation）
      5. リバースエンジニアリング（既存仕様読解）

📍 Slide 72: STEP4 チェックリスト
   Estimated height: 820px (max: 670px)
   Overflow: 150px
   Content: 0 h2, 0 h3, 0 h4, 3 paragraphs, 9 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. [ ] 1タスク30分〜2時間で完了
      2. [ ] Given-When-Thenテストを先に作成
      3. [ ] 最小実装でテストを通した
      4. [ ] AI自己レビュー実施
      5. [ ] セキュリティ要件を満たした（BCrypt・環境変数・@Valid）

📍 Slide 208: 
   Estimated height: 810px (max: 670px)
   Overflow: 140px
   Content: 0 h2, 1 h3, 4 h4, 1 paragraphs, 4 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. TODO/メモ/簡易ECなど、5-STEP実践、TDD習慣化
      2. 複数テーブル・画面、認証・認可、E2Eテスト
      3. リバースエンジニアリング、デグレ防止、技術的負債解消
      4. 5-STEP運用、プロンプト共有、Living Documentation浸透

📍 Slide 32: STEP1 チェックリスト
   Estimated height: 785px (max: 670px)
   Overflow: 115px
   Content: 0 h2, 0 h3, 0 h4, 3 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. [ ] 要件をAIに質問させて曖昧さを排除した
      2. [ ] MoSCoWで優先順位付け（Mustは20-30%）
      3. [ ] ユーザーストーリーマッピング作成
      4. [ ] 非機能要件（性能・セキュリティ・拡張性）定義
      5. [ ] エラー・エッジケースを洗い出した

📍 Slide 45: STEP2 チェックリスト
   Estimated height: 785px (max: 670px)
   Overflow: 115px
   Content: 0 h2, 0 h3, 0 h4, 3 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. [ ] Tech Stack確定（フロント・バック・DB・ライブラリ）
      2. [ ] システムアーキテクチャ図作成（Mermaid/SVG）
      3. [ ] ER図作成（テーブル・カラム・制約・インデックス）
      4. [ ] API仕様定義（全エンドポイント）
      5. [ ] シーケンス図作成（複雑な処理フロー）

📍 Slide 58: STEP3 チェックリスト
   Estimated height: 785px (max: 670px)
   Overflow: 115px
   Content: 0 h2, 0 h3, 0 h4, 3 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. [ ] タスク一覧をAIに生成させた
      2. [ ] Phase分け（Phase 1-4）
      3. [ ] 各タスクは30分〜2時間
      4. [ ] 依存関係を明示
      5. [ ] 完了条件を具体的に記載

📍 Slide 145: 
   Estimated height: 770px (max: 670px)
   Overflow: 100px
   Content: 0 h2, 1 h3, 0 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. なぜ必要: AIは局所変更のみ見る→全体影響見落とし→デグレ
      2. 調査項目:

変更ファイル: Controller/Service/Repository/Entity/View
      3. 影響テーブル: カラム追加、制約/インデックス変更
      4. 連鎖影響: 他機能、API呼び出し元、画面表示
      5. テスト箇所: 単体/統合/E2Eテスト

📍 Slide 46: 
   Estimated height: 765px (max: 670px)
   Overflow: 95px
   Content: 1 h2, 0 h3, 0 h4, 4 paragraphs, 13 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. [ ] AI活用の3原則を説明できる
      2. [ ] Reward Hacking対策を実践できる
      3. [ ] セットアップができる
      4. [ ] 3つのモードを使い分けられる
      5. [ ] 効率的な指示の出し方を実践できる

📍 Slide 116: 演習で体感できること
   Estimated height: 760px (max: 670px)
   Overflow: 90px
   Content: 0 h2, 5 h3, 0 h4, 0 paragraphs, 11 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. STEP1-2丁寧実施： スムーズ、手戻り少、完成早い
      2. STEP1-2省略： 迷う、手戻り多発、遅い
      3. テストなし： 人間実行→エラー確認→コピペ→AI伝達→修正（無限ループ）
      4. テストあり： AI自動テスト→検知→修正→成功（自己完結）
      5. Before： バグだらけ

📍 Slide 182: 
   Estimated height: 760px (max: 670px)
   Overflow: 90px
   Content: 0 h2, 0 h3, 1 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. デグレが起きる3つの原因

AIは忘れっぽい→既存仕様を忘れる
      2. Jagged Intelligence→影響範囲を判断できない
      3. Reward Hacking→新機能優先、既存機能軽視
      4. TDDによる予防

テストがあれば→AIが自動で検証
      5. デグレを大幅削減

📍 Slide 202: 
   Estimated height: 755px (max: 670px)
   Overflow: 85px
   Content: 0 h2, 1 h3, 4 h4, 0 paragraphs, 12 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. STEP1-2を丁寧に実施
      2. AIに質問させる手法を活用
      3. 受け入れ条件を明確化
      4. タスク分解で計画を作成
      5. 早い段階での軌道修正

================================================================================
LOW RISK SLIDES
================================================================================

📍 Slide 143: 
   Estimated height: 735px (max: 670px)
   Overflow: 65px
   Content: 0 h2, 1 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 目的: 既存vs新機能比較、追加開発範囲明確化
      2. 分析項目:

Fit: そのまま使える機能、流用コード
      3. Gap: 新規実装、既存拡張、修正箇所
      4. Impact: 既存への影響、連鎖的変更
      5. AIへの指示: 「既存○○と新規△△のフィットギャップ分析」

📍 Slide 152: 
   Estimated height: 735px (max: 670px)
   Overflow: 65px
   Content: 0 h2, 1 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. テストシナリオを先に作成（Guardrails構築）

全体像を把握→AIは忘れっぽい対策
      2. モレ・ヌケを防止→Jagged Intelligence対策
      3. 明確な指針＝AIへのGuardrails
      4. テストコードを実装

シナリオに基づいてAIが自動生成
      5. 確実にカバー

📍 Slide 206: 
   Estimated height: 730px (max: 670px)
   Overflow: 60px
   Content: 0 h2, 1 h3, 5 h4, 0 paragraphs, 10 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 実装後必ず「このコードをレビューして」
      2. バグ検出率向上
      3. Given-When-Then形式
      4. 曖昧さ排除→AI制約対策
      5. .envで秘密情報管理

📍 Slide 191: 
   Estimated height: 725px (max: 670px)
   Overflow: 55px
   Content: 0 h2, 0 h3, 1 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. architecture.md更新: テーブル、API、画面記録

AI指示: 「変更内容をarchitecture.mdに反映して」
      2. README.md更新: セットアップ、使い方記録

AI指示: 「新機能の使い方をREADME.mdに追加」
      3. 知見の記録: ハマった点、解決方法、ベストプラクティス
      4. Living Documentation: ドキュメント＝AIの外部メモリ
      5. 効果: 知見蓄積、チーム共有、再現可能な開発

📍 Slide 38: データベーススキーマ設計
   Estimated height: 715px (max: 670px)
   Overflow: 45px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. なぜスキーマ定義が必要か

後から変更すると影響範囲が非常に大きい
      2. AIは明示的な指示がないと不適切な設計をする
      3. スキーマ定義で得られる効果

AIが正確なSQL・ORM実装ができる
      4. カラム名・型・制約の一貫性が保たれる
      5. マイグレーションの自動生成が可能

📍 Slide 52: Phase分け戦略（Phase 1-4）
   Estimated height: 715px (max: 670px)
   Overflow: 45px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. なぜPhase分けが必要か

全部一度に作ると依存関係が複雑化→AIが混乱（忘れっぽい）
      2. 段階的に作れば各Phaseで動作確認→早期問題発見
      3. Phase 1（基盤）: DB接続・認証基盤・基本CRUD
      4. Phase 2（コア機能）: ビジネスロジック・主要API
      5. Phase 3（拡張機能）: 検索・フィルタ・通知

📍 Slide 65: セキュリティベストプラクティス（重要）
   Estimated height: 715px (max: 670px)
   Overflow: 45px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 8 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. なぜセキュリティが後回しになるか（Reward Hacking）

AIは「タスク完了」を最優先→セキュリティは二の次
      2. 平文保存、ハードコーディングで「とりあえず動く」を選ぶ
      3. セキュリティ知識はあるが、明示しないと省略する
      4. 対策：明確な制約を設定（Guardrails）

パスワード→BCrypt、APIキー→環境変数
      5. JWT秘密鍵→環境変数、入力値→@Valid必須

📍 Slide 169: 
   Estimated height: 700px (max: 670px)
   Overflow: 30px
   Content: 0 h2, 1 h3, 0 h4, 2 paragraphs, 5 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. STEP1: リバースエンジニアリング（30分） 仕様把握、ドキュメント自動生成
      2. STEP2: フィットギャップ分析＆影響範囲調査（20分） 追加開発範囲の明確化
      3. STEP3: テストシナリオ作成（30分） 既存機能・新機能・デグレ防止を網羅
      4. STEP4: テストコード実装＋機能追加（60分） TDD、Red-Green-Refactor、AI自己レビュー、ドキュメント反映
      5. 効果: 体系的高品質追加、実務再現可能

📍 Slide 26: ユーザーストーリーマッピング
   Estimated height: 680px (max: 670px)
   Overflow: 10px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. フォーマット: &lt;誰が&gt; &lt;何をしたい&gt; &lt;なぜ&gt;
      2. 例: ユーザーとして、タスクを追加したい（忘れないため）
      3. ユーザーの旅:

タスク管理（追加・完了・削除）
      4. タスク整理（カテゴリ・優先度）
      5. 進捗確認（完了数・期限）

📍 Slide 36: 設計ドキュメントの構造
   Estimated height: 680px (max: 670px)
   Overflow: 10px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 1. 技術スタック: フロント・バック・DB・ライブラリ（選定理由含む）
      2. 2. システムアーキテクチャ: 3層構造、Mermaid図で可視化
      3. 3. データベーススキーマ: テーブル定義・カラム・制約・インデックス
      4. 4. API仕様: エンドポイント・メソッド・パラメータ・レスポンス
      5. 5. 受入条件（BDD形式）: Given-When-Then

📍 Slide 54: 依存関係の可視化
   Estimated height: 680px (max: 670px)
   Overflow: 10px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. なぜ依存関係の可視化が必要か

順序を間違えると手戻りが発生（DB未作成でAPI実装できない）
      2. AIは依存関係の判断が苦手（タスク実行は得意だが順序判断は苦手）
      3. 並行作業可能なタスク: フロントとバックを同時進行
      4. 順序が必要なタスク: DB設計→マイグレーション→API実装
      5. AIへの指示: 「依存関係を明示してタスク一覧を作成して」

📍 Slide 55: タスク一覧テンプレート
   Estimated height: 680px (max: 670px)
   Overflow: 10px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. 必須項目: Phase・タスク名・所要時間・依存関係・完了条件
      2. なぜテンプレート化が必要か

曖昧な計画→AIが勝手に解釈（構造化タスクは得意だが自由形式は苦手）
      3. 明確なフォーマット→AIが一貫した出力
      4. 進捗管理: 一覧表でステータス可視化（未着手・進行中・完了）
      5. チーム共有: Markdown形式でGit管理、誰でも参照可能

📍 Slide 63: TDD/BDD統合ワークフロー
   Estimated height: 680px (max: 670px)
   Overflow: 10px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. なぜTDD/BDDが必要か

テストなし→AIが作る→人間が手動テスト→エラー→修正（無限ループ）
      2. テストあり→AIが作る→自動テスト→エラー→AI自己修正（自己完結）
      3. Red（失敗するテストを書く）: テストが仕様を定義
      4. Green（最小実装）: テストを通す最小コード
      5. Refactor（改善）: テストが保証するから安心してリファクタリング

📍 Slide 64: AIにTDD/BDDで実装させる
   Estimated height: 680px (max: 670px)
   Overflow: 10px
   Content: 0 h2, 0 h3, 0 h4, 1 paragraphs, 7 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. プロンプト例: 「POST /api/register を TDD で実装して。Given-When-Then形式のテストを書き、正常系・異...
      2. AIが自動で行うこと:

Given-When-Thenテストを先に書く
      3. 実装コードを書く
      4. テストを実行→失敗→修正→成功を繰り返す
      5. 人間の役割: プロンプトで方向性を指示、結果をレビュー

📍 Slide 176: 
   Estimated height: 675px (max: 670px)
   Overflow: 5px
   Content: 0 h2, 1 h3, 3 h4, 0 paragraphs, 11 list items
   Layout: Single column (HIGH RISK)
   List items sample:
      1. テーブル: 「全テーブル定義をMarkdown出力」
      2. API: 「全エンドポイントをOpenAPI出力」
      3. 画面: 「画面一覧と遷移図作成」
      4. ビジネスロジック: 「○○機能を説明」
      5. 目的: 変更箇所・影響把握、デグレ防止

================================================================================
RECOMMENDATIONS
================================================================================

For HIGH/MEDIUM risk slides:
1. Add layout class: <!-- _class: two-column --> or <!-- _class: layout-diagram-only -->
2. Split into multiple slides
3. Replace with SVG diagram
4. Reduce font sizes (last resort)

