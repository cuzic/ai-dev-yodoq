<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1820 1700">
  <defs>
    <style>
      .title { font-family: 'Noto Sans JP', sans-serif; font-size: 42px; font-weight: bold; fill: #333333; }
      .category-title { font-family: 'Noto Sans JP', sans-serif; font-size: 36px; font-weight: bold; fill: white; }
      .req-text { font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: white; }
      .section-header { font-family: 'Noto Sans JP', sans-serif; font-size: 26px; font-weight: bold; }
      .prompt-title { font-family: 'Noto Sans JP', sans-serif; font-size: 32px; font-weight: bold; }
      .prompt-text { font-family: 'Courier New', monospace; font-size: 22px; }
    </style>
  </defs>

  <!-- Background -->
  <rect width="1820" height="1700" fill="#FFFFFF"/>

  <!-- Title -->
  <text x="910" y="50" class="title" text-anchor="middle">非機能要件チェックリスト（AIに指示すべき項目）</text>

  <!-- Category 1: Security -->
  <rect x="50" y="80" width="420" height="390" fill="#00146E" rx="10"/>
  <text x="260" y="110" class="category-title" text-anchor="middle">🔒 セキュリティ</text>

  <text x="70" y="150" class="req-text section-header" font-weight="bold">□ 認証・認可</text>
  <text x="80" y="185" class="req-text">• BCryptでパスワード</text>
  <text x="85" y="220" class="req-text">ハッシュ化（10回以上）</text>
  <text x="80" y="255" class="req-text">• JWT認証（有効期限</text>
  <text x="85" y="290" class="req-text">24時間、リフレッシュ対応）</text>
  <text x="80" y="325" class="req-text">• ロール・権限管理</text>

  <text x="70" y="365" class="req-text section-header" font-weight="bold">□ 入力検証</text>
  <text x="80" y="400" class="req-text">• @Valid バリデーション</text>
  <text x="80" y="435" class="req-text">• SQLインジェクション対策</text>

  <!-- Category 2: Performance -->
  <rect x="490" y="80" width="420" height="390" fill="#003399" rx="10"/>
  <text x="700" y="110" class="category-title" text-anchor="middle">⚡ パフォーマンス</text>

  <text x="510" y="150" class="req-text section-header" font-weight="bold">□ DB最適化</text>
  <text x="520" y="185" class="req-text">• N+1問題対策</text>
  <text x="525" y="220" class="req-text">（@EntityGraph使用）</text>
  <text x="520" y="255" class="req-text">• インデックス設定</text>
  <text x="520" y="290" class="req-text">• ページング実装</text>
  <text x="525" y="325" class="req-text">（最大100件/ページ）</text>

  <text x="510" y="365" class="req-text section-header" font-weight="bold">□ キャッシング</text>
  <text x="520" y="400" class="req-text">• @Cacheable 使用</text>
  <text x="520" y="435" class="req-text">• TTL設定（1時間）</text>

  <!-- Category 3: Reliability -->
  <rect x="930" y="80" width="420" height="390" fill="#00AFF0" rx="10"/>
  <text x="1140" y="110" class="category-title" text-anchor="middle">🛡️ 信頼性</text>

  <text x="950" y="150" class="req-text section-header" font-weight="bold">□ エラーハンドリング</text>
  <text x="960" y="185" class="req-text">• カスタム例外クラス</text>
  <text x="960" y="220" class="req-text">• @ControllerAdvice で</text>
  <text x="965" y="255" class="req-text">統一エラーレスポンス</text>
  <text x="960" y="290" class="req-text">• エラーログ出力</text>

  <text x="950" y="330" class="req-text section-header" font-weight="bold">□ トランザクション</text>
  <text x="960" y="365" class="req-text">• @Transactional 使用</text>
  <text x="960" y="400" class="req-text">• rollbackFor指定</text>
  <text x="960" y="435" class="req-text">• @Version 楽観ロック</text>

  <!-- Category 4: Usability -->
  <rect x="1370" y="80" width="420" height="390" fill="#66D9FF" rx="10"/>
  <text x="1580" y="110" style="font-family: 'Noto Sans JP', sans-serif; font-size: 36px; font-weight: bold; fill: #00146E; text-anchor: middle;">
    🎨 使いやすさ
  </text>

  <text x="1390" y="150" style="font-family: 'Noto Sans JP', sans-serif; font-size: 26px; fill: #00146E; font-weight: bold;">
    □ API設計
  </text>
  <text x="1400" y="185" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • RESTful API設計
  </text>
  <text x="1400" y="220" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • HTTPステータス</text>
  <text x="1405" y="255" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    コード適切に返却
  </text>
  <text x="1400" y="290" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • ユーザーフレンドリー
  </text>

  <text x="1390" y="330" style="font-family: 'Noto Sans JP', sans-serif; font-size: 26px; fill: #00146E; font-weight: bold;">
    □ ドキュメント
  </text>
  <text x="1400" y="365" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • Swagger/OpenAPI
  </text>
  <text x="1400" y="400" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • README.md作成
  </text>
  <text x="1400" y="435" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • .env.example
  </text>

  <!-- Category 5: Maintainability -->
  <rect x="50" y="490" width="420" height="390" fill="#4D6DB3" rx="10"/>
  <text x="260" y="520" class="category-title" text-anchor="middle">🔧 保守性</text>

  <text x="70" y="560" class="req-text section-header" font-weight="bold">□ コーディング規約</text>
  <text x="80" y="595" class="req-text">• 変数名・メソッド名</text>
  <text x="85" y="630" class="req-text">意図明確に</text>
  <text x="80" y="665" class="req-text">• マジックナンバー</text>
  <text x="85" y="700" class="req-text">禁止（定数化）</text>
  <text x="80" y="735" class="req-text">• 1メソッド30行以内</text>

  <text x="70" y="775" class="req-text section-header" font-weight="bold">□ テスト</text>
  <text x="80" y="810" class="req-text">• カバレッジ80%以上</text>
  <text x="80" y="845" class="req-text">• JUnit5 + Mockito</text>

  <!-- Category 6: Scalability -->
  <rect x="490" y="490" width="420" height="390" fill="#00146E" rx="10"/>
  <text x="700" y="520" class="category-title" text-anchor="middle">📈 拡張性</text>

  <text x="510" y="560" class="req-text section-header" font-weight="bold">□ 設計原則</text>
  <text x="520" y="595" class="req-text">• SOLID原則遵守</text>
  <text x="520" y="630" class="req-text">• レイヤード</text>
  <text x="525" y="665" class="req-text">アーキテクチャ</text>
  <text x="520" y="700" class="req-text">• DIコンテナ活用</text>

  <text x="510" y="740" class="req-text section-header" font-weight="bold">□ 設定外部化</text>
  <text x="520" y="775" class="req-text">• application.yml</text>
  <text x="525" y="810" class="req-text">環境別設定</text>
  <text x="520" y="845" class="req-text">• フィーチャーフラグ</text>

  <!-- Category 7: Monitoring -->
  <rect x="930" y="490" width="420" height="390" fill="#00AFF0" rx="10"/>
  <text x="1140" y="520" class="category-title" text-anchor="middle">📊 監視</text>

  <text x="950" y="560" class="req-text section-header" font-weight="bold">□ ログ管理</text>
  <text x="960" y="595" class="req-text">• 構造化ログ</text>
  <text x="965" y="630" class="req-text">（SLF4J + Logback）</text>
  <text x="960" y="665" class="req-text">• ログレベル適切設定</text>
  <text x="960" y="700" class="req-text">• 機密情報を出力しない</text>

  <text x="950" y="740" class="req-text section-header" font-weight="bold">□ ヘルスチェック</text>
  <text x="960" y="775" class="req-text">• /actuator/health</text>
  <text x="960" y="810" class="req-text">• タイムアウト設定</text>
  <text x="965" y="845" class="req-text">（API: 30秒、DB: 10秒）</text>

  <!-- Category 8: Security Advanced -->
  <rect x="1370" y="490" width="420" height="390" fill="#66D9FF" rx="10"/>
  <text x="1580" y="520" style="font-family: 'Noto Sans JP', sans-serif; font-size: 36px; font-weight: bold; fill: #00146E; text-anchor: middle;">
    🔐 機密管理
  </text>

  <text x="1390" y="560" style="font-family: 'Noto Sans JP', sans-serif; font-size: 26px; fill: #00146E; font-weight: bold;">
    □ 環境変数
  </text>
  <text x="1400" y="595" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • .env.example作成
  </text>
  <text x="1400" y="630" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • シークレット管理
  </text>
  <text x="1400" y="665" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • .gitignore設定
  </text>

  <text x="1390" y="705" style="font-family: 'Noto Sans JP', sans-serif; font-size: 26px; fill: #00146E; font-weight: bold;">
    □ 依存管理
  </text>
  <text x="1400" y="740" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • バージョン固定
  </text>
  <text x="1400" y="775" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • 脆弱性スキャン
  </text>
  <text x="1405" y="810" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    （Dependabot）
  </text>
  <text x="1400" y="845" style="font-family: 'Noto Sans JP', sans-serif; font-size: 24px; fill: #00146E;">
    • 未使用依存削除
  </text>

  <!-- Bottom: How to use with AI -->
  <rect x="50" y="900" width="1740" height="750" fill="#E6E6E6" stroke="#00146E" stroke-width="3" rx="10"/>
  <text x="920" y="950" style="font-family: 'Noto Sans JP', sans-serif; font-size: 42px; fill: #00146E; text-anchor: middle; font-weight: bold;">
    AIへの指示例（非機能要件を含める）
  </text>

  <rect x="80" y="990" width="1680" height="630" fill="#00AFF0" rx="8"/>
  <text x="110" y="1035" style="font-family: 'Noto Sans JP', sans-serif; font-size: 36px; fill: white; font-weight: bold;">
    プロンプト例:
  </text>
  <text x="130" y="1080" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    「ユーザー登録機能を実装して。以下の非機能要件を満たすこと:
  </text>

  <text x="150" y="1125" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    【セキュリティ】BCryptでパスワードハッシュ化、@Valid でバリデーション、
  </text>
  <text x="180" y="1165" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    環境変数でシークレット管理
  </text>

  <text x="150" y="1210" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    【パフォーマンス】メールアドレス重複チェックにインデックス設定、
  </text>
  <text x="180" y="1250" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    @Async で非同期メール送信
  </text>

  <text x="150" y="1295" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    【信頼性】@Transactional でトランザクション管理、
  </text>
  <text x="180" y="1335" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    @ControllerAdvice で統一エラー処理
  </text>

  <text x="150" y="1380" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    【使いやすさ】日本語エラーメッセージ、Swagger API仕様書、
  </text>
  <text x="180" y="1420" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    README.md作成
  </text>

  <text x="150" y="1465" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    【保守性】JUnit テストコード（カバレッジ80%以上）、変数名は意図明確に
  </text>

  <text x="150" y="1510" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    【拡張性】Controller/Service/Repository 3層アーキテクチャ、
  </text>
  <text x="180" y="1550" style="font-family: 'Courier New', monospace; font-size: 26px; fill: white;">
    DIコンテナ活用」
  </text>

  <text x="110" y="1600" style="font-family: 'Noto Sans JP', sans-serif; font-size: 36px; fill: white; font-weight: bold;">
    → 非機能要件を明記することで、AIが本番レベルのコードを生成！
  </text>
</svg>
