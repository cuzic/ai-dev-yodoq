<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1560 1040">
  <defs>
    <style>
      .title { font-family: 'Noto Sans JP', sans-serif; font-size: 90px; font-weight: bold; fill: #333333; }
      .section-title { font-family: 'Noto Sans JP', sans-serif; font-size: 74px; font-weight: bold; fill: white; }
      .code { font-family: 'Courier New', monospace; font-size: 50px; }
      .text { font-family: 'Noto Sans JP', sans-serif; font-size: 54px; }
    </style>
  </defs>

  <!-- Background -->
  <rect width="1200" height="800" fill="#FFFFFF"/>

  <!-- Title -->
  <text x="600" y="40" class="title" text-anchor="middle">セキュリティベストプラクティス（NG例 vs OK例）</text>

  <!-- Section 1: Password Hashing -->
  <text x="600" y="80" style="font-family: 'Noto Sans JP', sans-serif; font-size: 72px; font-weight: bold; fill: #00146E; text-anchor: middle;">
    1. パスワード管理
  </text>

  <!-- NG Example -->
  <rect x="50" y="100" width="530" height="160" fill="#E6E6E6" stroke="#CC0000" stroke-width="4" rx="10"/>
  <rect x="70" y="115" width="80" height="30" fill="#CC0000" rx="5"/>
  <text x="110" y="136" style="font-family: 'Noto Sans JP', sans-serif; font-size: 70px; fill: white; text-anchor: middle; font-weight: bold;">✗ NG例</text>

  <text x="70" y="165" class="text" fill="#CC0000" font-weight="bold">Reward Hacking: 平文保存</text>
  <rect x="70" y="175" width="490" height="70" fill="#333333" rx="5"/>
  <text x="80" y="195" class="code" fill="#FF6B6B">// パスワードを平文で保存（危険！）</text>
  <text x="80" y="210" class="code" fill="white">user.setPassword(password); </text>
  <text x="80" y="225" class="code" fill="white">userRepository.save(user);</text>
  <text x="80" y="240" class="code" fill="#FF6B6B">// → DB漏洩で全ユーザーのパスワードが露出</text>

  <!-- OK Example -->
  <rect x="620" y="100" width="530" height="160" fill="#E6E6E6" stroke="#00AA00" stroke-width="4" rx="10"/>
  <rect x="640" y="115" width="80" height="30" fill="#00AA00" rx="5"/>
  <text x="680" y="136" style="font-family: 'Noto Sans JP', sans-serif; font-size: 70px; fill: white; text-anchor: middle; font-weight: bold;">✓ OK例</text>

  <text x="640" y="165" class="text" fill="#00AA00" font-weight="bold">BCryptでハッシュ化</text>
  <rect x="640" y="175" width="490" height="70" fill="#003399" rx="5"/>
  <text x="650" y="195" class="code" fill="#66D9FF">// BCryptでハッシュ化してから保存</text>
  <text x="650" y="210" class="code" fill="white">String hashed = passwordEncoder.encode(password);</text>
  <text x="650" y="225" class="code" fill="white">user.setPassword(hashed);</text>
  <text x="650" y="240" class="code" fill="#66D9FF">// → 安全。DB漏洩しても復元不可能</text>

  <!-- Section 2: JWT Secret -->
  <text x="600" y="305" style="font-family: 'Noto Sans JP', sans-serif; font-size: 72px; font-weight: bold; fill: #00146E; text-anchor: middle;">
    2. JWT秘密鍵管理
  </text>

  <!-- NG Example -->
  <rect x="50" y="325" width="530" height="160" fill="#E6E6E6" stroke="#CC0000" stroke-width="4" rx="10"/>
  <rect x="70" y="340" width="80" height="30" fill="#CC0000" rx="5"/>
  <text x="110" y="361" style="font-family: 'Noto Sans JP', sans-serif; font-size: 70px; fill: white; text-anchor: middle; font-weight: bold;">✗ NG例</text>

  <text x="70" y="390" class="text" fill="#CC0000" font-weight="bold">Reward Hacking: ハードコーディング</text>
  <rect x="70" y="400" width="490" height="70" fill="#333333" rx="5"/>
  <text x="80" y="420" class="code" fill="#FF6B6B">// 秘密鍵をコードに直書き（危険！）</text>
  <text x="80" y="435" class="code" fill="white">String secret = "my-super-secret-key-12345";</text>
  <text x="80" y="450" class="code" fill="white">String token = Jwts.builder().signWith(secret).compact();</text>
  <text x="80" y="465" class="code" fill="#FF6B6B">// → GitHub公開で秘密鍵が漏洩</text>

  <!-- OK Example -->
  <rect x="620" y="325" width="530" height="160" fill="#E6E6E6" stroke="#00AA00" stroke-width="4" rx="10"/>
  <rect x="640" y="340" width="80" height="30" fill="#00AA00" rx="5"/>
  <text x="680" y="361" style="font-family: 'Noto Sans JP', sans-serif; font-size: 70px; fill: white; text-anchor: middle; font-weight: bold;">✓ OK例</text>

  <text x="640" y="390" class="text" fill="#00AA00" font-weight="bold">環境変数で管理</text>
  <rect x="640" y="400" width="490" height="70" fill="#003399" rx="5"/>
  <text x="650" y="420" class="code" fill="#66D9FF">// 環境変数から読み込み</text>
  <text x="650" y="435" class="code" fill="white">@Value("${jwt.secret}") String secret;</text>
  <text x="650" y="450" class="code" fill="white">String token = Jwts.builder().signWith(secret).compact();</text>
  <text x="650" y="465" class="code" fill="#66D9FF">// → .envファイルで管理、Gitにコミットしない</text>

  <!-- Section 3: Environment Variables -->
  <text x="600" y="530" style="font-family: 'Noto Sans JP', sans-serif; font-size: 72px; font-weight: bold; fill: #00146E; text-anchor: middle;">
    3. 環境変数設定（.env）
  </text>

  <rect x="50" y="550" width="530" height="190" fill="#003399" rx="10"/>
  <text x="300" y="575" class="section-title" text-anchor="middle">.env ファイル（Gitにコミットしない）</text>

  <rect x="70" y="590" width="490" height="135" fill="#00146E" rx="5"/>
  <text x="80" y="610" class="code" fill="#66D9FF"># .env ファイルの内容</text>
  <text x="80" y="625" class="code" fill="white">JWT_SECRET=very-long-random-secret-key-256bits</text>
  <text x="80" y="640" class="code" fill="white">DB_PASSWORD=production-db-password-12345</text>
  <text x="80" y="655" class="code" fill="white">API_KEY=external-api-key-abcdefgh</text>
  <text x="80" y="670" class="code" fill="white">SMTP_PASSWORD=email-server-password</text>
  <text x="80" y="695" class="code" fill="#66D9FF"># .gitignore に .env を追加</text>
  <text x="80" y="710" class="code" fill="#66D9FF"># .env.example をGitにコミット</text>

  <rect x="620" y="550" width="530" height="190" fill="#00AFF0" rx="10"/>
  <text x="885" y="575" class="section-title" text-anchor="middle">.env.example（Gitにコミット）</text>

  <rect x="640" y="590" width="490" height="135" fill="#FFFFFF" rx="5"/>
  <text x="650" y="610" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #666666;"># .env.example ファイルの内容</text>
  <text x="650" y="625" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #00146E;">JWT_SECRET=change-this-to-random-secret</text>
  <text x="650" y="640" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #00146E;">DB_PASSWORD=your-database-password</text>
  <text x="650" y="655" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #00146E;">API_KEY=your-api-key-here</text>
  <text x="650" y="670" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #00146E;">SMTP_PASSWORD=your-smtp-password</text>
  <text x="650" y="695" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #666666;"># 新しい開発者がこれをコピーして</text>
  <text x="650" y="710" style="font-family: 'Courier New', monospace; font-size: 50px; fill: #666666;"># .env を作成する</text>

  <!-- Bottom summary -->
  <rect x="50" y="760" width="1100" height="30" fill="#E6E6E6" stroke="#00146E" stroke-width="3" rx="5"/>
  <text x="600" y="782" style="font-family: 'Noto Sans JP', sans-serif; font-size: 70px; fill: #00146E; text-anchor: middle; font-weight: bold;">
    AIへの指示: 「BCrypt、環境変数、@Valid、レート制限を必ず実装して」と明示しないと手抜きされる
  </text>
</svg>
