<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1300 650">
  <defs>
    <style>
      .title { font-family: 'Noto Sans JP', sans-serif; font-size: 81px; font-weight: bold; fill: #333333; }
      .subtitle { font-family: 'Noto Sans JP', sans-serif; font-size: 74px; font-weight: bold; }
      .text { font-family: 'Noto Sans JP', sans-serif; font-size: 60px; }
      .code { font-family: 'Courier New', monospace; font-size: 50px; }
    </style>
  </defs>

  <!-- Background -->
  <rect width="1000" height="500" fill="#FFFFFF"/>

  <!-- Title -->
  <text x="500" y="35" class="title" text-anchor="middle">テストシナリオ → テストコードの流れ</text>

  <!-- Left: Test Scenario (What) -->
  <rect x="30" y="80" width="280" height="350" fill="#E6E6E6" stroke="#00146E" stroke-width="3" rx="10"/>
  <text x="170" y="110" class="subtitle" fill="#00146E" text-anchor="middle">テストシナリオ（What）</text>
  <text x="170" y="135" class="text" fill="#333333" text-anchor="middle">何をテストするか</text>

  <rect x="50" y="160" width="240" height="250" fill="#FFFFFF" stroke="#00AFF0" stroke-width="3" rx="5"/>
  <text x="60" y="185" class="text" fill="#00146E" font-weight="bold">シナリオ例（Markdown形式）:</text>

  <text x="60" y="215" class="text" fill="#333333" font-weight="bold">1. 正常系:</text>
  <text x="70" y="235" class="text" fill="#333333" font-size="24">正しいメール・パスワードで</text>
  <text x="70" y="250" class="text" fill="#333333" font-size="24">ログイン成功</text>

  <text x="60" y="280" class="text" fill="#333333" font-weight="bold">2. 異常系:</text>
  <text x="70" y="300" class="text" fill="#333333" font-size="24">間違ったパスワードで</text>
  <text x="70" y="315" class="text" fill="#333333" font-size="24">ログイン失敗</text>

  <text x="60" y="345" class="text" fill="#333333" font-weight="bold">3. 境界値:</text>
  <text x="70" y="365" class="text" fill="#333333" font-size="24">パスワード長7文字（NG）</text>
  <text x="70" y="380" class="text" fill="#333333" font-size="24">8文字（OK）</text>

  <!-- Center: AI Conversion -->
  <rect x="360" y="180" width="280" height="160" fill="#00AFF0" rx="10"/>
  <text x="500" y="210" class="subtitle" fill="white" text-anchor="middle">AIの変換処理</text>

  <text x="380" y="245" class="text" fill="white">1. シナリオ解析</text>
  <text x="380" y="270" class="text" fill="white">2. Given-When-Then構造化</text>
  <text x="380" y="295" class="text" fill="white">3. コード生成</text>

  <text x="500" y="325" class="text" fill="white" text-anchor="middle" font-weight="bold">シナリオ1つ = テストメソッド1つ</text>

  <!-- Arrows -->
  <line x1="310" y1="250" x2="360" y2="250" stroke="#00146E" stroke-width="4"/>
  <polygon points="360,250 350,245 350,255" fill="#00146E"/>

  <line x1="640" y1="250" x2="690" y2="250" stroke="#003399" stroke-width="4"/>
  <polygon points="690,250 680,245 680,255" fill="#003399"/>

  <!-- Right: Test Code (How) -->
  <rect x="690" y="80" width="280" height="350" fill="#E6E6E6" stroke="#003399" stroke-width="3" rx="10"/>
  <text x="830" y="110" class="subtitle" fill="#003399" text-anchor="middle">テストコード（How）</text>
  <text x="830" y="135" class="text" fill="#333333" text-anchor="middle">どうテストするか</text>

  <rect x="710" y="160" width="240" height="250" fill="#003399" rx="5"/>
  <text x="720" y="185" class="text" fill="white" font-weight="bold">JUnit形式:</text>

  <text x="720" y="210" class="code" fill="white">@Test</text>
  <text x="720" y="225" class="code" fill="white">void testLoginSuccess() {</text>
  <text x="730" y="245" class="code" fill="#66D9FF">// Given: 登録済みユーザー</text>
  <text x="730" y="260" class="code" fill="white">User user = setupUser();</text>

  <text x="730" y="280" class="code" fill="#66D9FF">// When: 正しいパスワード</text>
  <text x="730" y="295" class="code" fill="white">var result = login(</text>
  <text x="740" y="310" class="code" fill="white">  user.email,</text>
  <text x="740" y="325" class="code" fill="white">  "correct_password"</text>
  <text x="730" y="340" class="code" fill="white">);</text>

  <text x="730" y="360" class="code" fill="#66D9FF">// Then: トークン発行</text>
  <text x="730" y="375" class="code" fill="white">assertNotNull(result.token);</text>
  <text x="730" y="390" class="code" fill="white">assertEquals(200, status);</text>
  <text x="720" y="405" class="code" fill="white">}</text>

  <!-- Bottom note -->
  <rect x="30" y="450" width="940" height="40" fill="#FFFFFF" stroke="#00146E" stroke-width="3" rx="5"/>
  <text x="500" y="475" style="font-family: 'Noto Sans JP', sans-serif; font-size: 64px; fill: #00146E; text-anchor: middle; font-weight: bold;">
    効果: テストシナリオで全体像把握 → AIが網羅的にテストコード生成
  </text>
</svg>
